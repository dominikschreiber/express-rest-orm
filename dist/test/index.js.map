{"version":3,"sources":["src/test/index.spec.js"],"names":[],"mappings":"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","file":"src/test/index.spec.js","sourcesContent":["'use strict';\n\nimport * as Q from 'q';\nimport * as async from 'async';\nimport * as supertest from 'supertest';\nimport * as assert from 'assert';\nimport * as express from 'express';\nimport * as bodyparser from 'body-parser';\nimport * as Sequelize from 'sequelize';\nimport * as _ from 'lodash';\n\nimport * as expressRestOrm from '../main/index';\nimport * as expressRestOrmErrors from '../main/errors';\n\nconst orm = new Sequelize.default('example', 'root', '', {\n    host: 'localhost',\n    dialect: 'sqlite',\n    pool: {\n        max: 5,\n        min: 0,\n        idle: 10000\n    },\n    logging: false,\n    storage: `${__dirname}/db.sqlite`\n});\n\nconst User = orm.define('user', {\n    givenname: {\n        type: Sequelize.STRING\n    },\n    lastname: {\n        type: Sequelize.STRING\n    }\n});\n\nconst Couple = orm.define('couple', {\n    one: {\n        type: Sequelize.INTEGER,\n        references: {\n            model: User,\n            key: 'id'\n        },\n        onDelete: 'CASCADE'\n    },\n    another: {\n        type: Sequelize.INTEGER,\n        references: {\n            model: User,\n            key: 'id'\n        },\n        onDelete: 'CASCADE'\n    }\n});\n\nconst models = [User, Couple];\n\nconst users = {\n    dominik: {id: 1, givenname: 'Dominik', lastname: 'Schreiber'},\n    hanna: {id: 2, givenname: 'Hanna', lastname: 'Schreiber'}\n};\n\nconst clean = data => _.omit(data, ['createdAt', 'updatedAt']);\nconst randomstring = len => Math.random().toString(36).substring((!len) ? 12 : len);\n\nlet app = false;\nlet request = false;\n\ndescribe('', () => {\n    beforeEach(done => {\n        orm.sync({force: true}).then(() => {\n            Q.all(_.values(users).map(user => User.create(_.omit(user, ['id'])))).then(() => {\n                Couple.create({\n                    one: 1,\n                    another: 2\n                }).then(() => {\n                    app = new express.default();\n                    app.use(bodyparser.json());\n                    app.use('/', new expressRestOrm.default(models));\n\n                    request = new supertest.default(app);\n                    \n                    done();\n                });\n            });\n        });\n    });\n\n    describe('   GET /', () => {\n        it('should list all resource endpoints relative to /', done => {\n            request\n                .get('/')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(res.body, models.map(model => `/${model.getTableName()}`));\n                    done();\n                });\n        });\n    });\n\n    describe('   GET /:resource', () => {\n        it('should list all resource urls relative to /', done => {\n            request\n                .get('/users')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    User.count().then(len => {\n                        assert.deepEqual(res.body, _.range(1, len + 1).map(i => `/users/${i}`));\n                        done();\n                    });\n                });\n        });\n    });\n\n    ['application/json', 'application/xml', 'text/x-yaml'].forEach(mime => {\n        describe(`   GET /:resource -H \"Accept: ${mime}\"`, () => {\n            it(`should deliver /:resource as ${mime}`, done => {\n                request\n                    .get('/users')\n                    .set('Accept', mime)\n                    .expect(200)\n                    .expect('Content-Type', new RegExp(mime, 'g'))\n                    .end(done);\n            });\n        });\n    });\n\n    _.pairs({\n        json: 'application/json',\n        xml: 'application/xml',\n        yml: 'text/x-yaml'\n    }).forEach(endingandmime => {\n        describe(`   GET /:resource.${endingandmime[0]}`, () => {\n            it(`should be equivalent to 'GET /:resource' with 'Accept: ${endingandmime[1]}'`, done => {\n                request\n                    .get(`/users.${endingandmime[0]}`)\n                    .expect(200)\n                    .end((err, actual) => {\n                        if (err) { done(err); }\n\n                        request\n                            .get('/users')\n                            .set('Accept', endingandmime[1])\n                            .expect(200)\n                            .end((e, expected) => {\n                                if (e) { done(e); }\n                                assert.deepEqual(actual.text, expected.text);\n                                done();\n                            });\n                    });\n            });\n        });\n    });\n\n    describe('   GET /:resource.:ext', () => {\n        it('should return an error for unknown extensions', done => {\n            request\n                .get('/users.unknown')\n                .set('Accept', 'application/json')\n                .expect(400)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.ok('url' in res.body);\n                    assert.deepEqual(_.omit(res.body, ['url']), expressRestOrmErrors.UNKNOWN_TYPE.error);\n                    done();\n                });\n        });\n    });\n\n    describe('   GET /:resource?include_docs=true', () => {\n        it('should list all resources as documents rather than urls', done => {\n            request\n                .get('/users?include_docs=true')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    User.findAll().then(results => {\n                        assert.deepEqual(res.body, results.map(r => {\n                            return clean(r.dataValues);\n                        }));\n                        done();\n                    });\n                });\n        });\n    });\n\n    describe('   GET /:resource?offset=:offset', () => {\n        it('should start listing resources after :offset entries', done => {\n            request\n                .get('/users?offset=1')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(res.body, [`/users/${users.hanna.id}`]);\n                    done();\n                });\n        });\n\n        it('should default to ?offset=10 if not specified', done => {\n            Q.all(_.range(20).map(() => {\n                return User.create({\n                    givenname: randomstring(),\n                    lastname: randomstring()\n                });\n            })).then(() => {\n                request\n                    .get('/users')\n                    .set('Accept', 'application/json')\n                    .expect(200)\n                    .end((err, res) => {\n                        if (err) { done(err); }\n                        assert.equal(res.body.length, 10);\n                        done();\n                    });\n            });\n        });\n    });\n\n    describe('   GET /:resource?limit=:limit', () => {\n        it('should return up to :limit urls', done => {\n            request\n                .get('/users?limit=1')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.equal(res.body.length, 1);\n                    done();\n                });\n        });\n\n        it('should default to ?limit=0 if not specified', done => {\n            request\n                .get('/users')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.equal(res.body[0], `/users/${users.dominik.id}`);\n                    done();\n                });\n        });\n    });\n\n    describe('   GET /:resource?:field{=,~=,|=,^=,$=,*=}:filter', () => {\n        var expected = [`/users/${users.dominik.id}`];\n\n        it('should filter exact matches when ?:field=:filter', done => {\n            request\n                .get(`/users?givenname=${users.dominik.givenname}`)\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(res.body, expected);\n                    done();\n                });\n        });\n\n        it('should filter oneof matches when ?:field~=:filter', done => {\n            request\n                .get(`/users?givenname~=Peter,${users.dominik.givenname}`)\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(res.body, expected);\n                    done();\n                });\n        });\n\n        it('should filter _prefix_/exact matches when ?:field|=:filter', done => {\n            User.create({\n                givenname: 'Dom-inik',\n                lastname: 'Schreiber'\n            }).then(() => {\n                request\n                    .get(`/users?givenname|=${users.dominik.givenname.substring(0, 3)}`)\n                    .set('Accept', 'application/json')\n                    .expect(200)\n                    .end((err, res) => {\n                        if (err) { done(err); }\n                        assert.deepEqual(res.body, expected.concat([`/users/${Object.keys(users).length + 1}`]));\n                        done();\n                    });\n            });\n        });\n\n        it('should filter prefix/_exact_ matches when ?:field|=:filter', done => {\n            request\n                .get(`/users?givenname|=${users.dominik.givenname}`)\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(res.body, expected);\n                    done();\n                });\n        });\n\n        it('should filter prefix matches when ?:field^=:filter', done => {\n            request\n                .get(`/users?givenname^=${users.dominik.givenname.substring(0, 3)}`)\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(res.body, expected);\n                    done();\n                });\n        });\n\n        it('should filter suffix matches when ?:field$=:filter', done => {\n            request\n                .get(`/users?givenname$=${users.dominik.givenname.slice(-3)}`)\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(res.body, expected);\n                    done();\n                });\n        });\n\n        it('should filter contains matches when ?:field*=:filter', done => {\n            request\n                .get(`/users?givenname*=${users.dominik.givenname.substring(2,4)}`)\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(res.body, expected);\n                    done();\n                });\n        });\n    });\n\n    describe('   GET /:resource?fields=:fields', () => {\n        it('should create a partial response containing only :fields properties', done => {\n            request\n                .get('/users?fields=givenname&include_docs=true')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(res.body, _.values(users).map(user => { return _.pick(user, 'id', 'givenname'); }));\n                    done();\n                });\n        });\n\n        it('should be ignored if ?include_docs=true is not set', done => {\n            request\n                .get('/users')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((e1, expected) => {\n                    if (e1) { done(e1); }\n\n                    request\n                        .get('/users?fields=givenname')\n                        .set('Accept', 'application/json')\n                        .expect(200)\n                        .end((e2, actual) => {\n                            if (e2) { done(e2); }\n                            assert.deepEqual(actual.body, expected.body);\n                            done();\n                        });\n                });\n        });\n    });\n\n    describe('  POST /:resource', () => {\n        it('should create a new resource from req.body', done => {\n            User.count().then(len => {\n                request\n                    .post('/users')\n                    .set('Accept', 'application/json')\n                    .send({ givenname: 'Rick', lastname: 'Astley' })\n                    .expect(200)\n                    .end((err, res) => {\n                        if (err) { done(err); }\n                        assert.equal(res.body, `/users/${len + 1}`);\n                        done();\n                    });\n            });\n        });\n    });\n\n    describe('   PUT /:resource', () => {\n        it('should bulk update resources as defined in req.body', done => {\n            const foo = {id: 1, givenname: 'F', lastname: 'oo'};\n            const bar = {id: 2, givenname: 'B', lastname: 'ar'};\n\n            User.findAll().then(raw => {\n                const results = raw.map(r => clean(r.dataValues));\n\n                assert.deepEqual(users.dominik, _.findWhere(results, {id: foo.id}));\n                assert.deepEqual(users.hanna, _.findWhere(results, {id: bar.id}));\n\n                request\n                    .put('/users')\n                    .set('Accept', 'application/json')\n                    .send([foo, bar])\n                    .expect(200)\n                    .end(err => {\n                        if (err) { done(err); }\n                        User.findAll().then(all => {\n                            const actuals = all.map(r => clean(r.dataValues));\n                            assert.deepEqual(foo, _.findWhere(actuals, {id: foo.id}));\n                            assert.deepEqual(bar, _.findWhere(actuals, {id: bar.id}));\n                            done();\n                        });\n                    });\n            });\n        });\n    });\n\n    describe('DELETE /:resource', () => {\n        it('should delete all resources of type :resource', done => {\n            User.count().then(numentries => {\n                assert.ok(numentries > 0);\n                request\n                    .delete('/users')\n                    .set('Accept', 'application/json')\n                    .expect(200)\n                    .end(err => {\n                        if (err) { done(err); }\n                        User.count().then(numentries => {\n                            assert.equal(numentries, 0);\n                            done();\n                        });\n                    });\n            });\n        });\n    });\n\n    describe('   GET /:resource/:id', () => {\n        it('should get the resource specified', done => {\n            request\n                .get('/users/1')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    User.findById(1).then(expected => {\n                        assert.deepEqual(res.body, clean(expected.dataValues));\n                        done();\n                    });\n                });\n        });\n\n        it('should replace foreign keys with resource urls', done => {\n            request\n                .get('/couples/1')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(res.body, {\n                        id: 1,\n                        one: `/users/${users.dominik.id}`,\n                        another: `/users/${users.hanna.id}`\n                    });\n                    done();\n                });\n        });\n    });\n\n    ['application/json', 'application/xml', 'text/x-yaml'].forEach(mime => {\n        describe(`   GET /:resource/:id -H \"Accept: ${mime}\"`, () => {\n            it(`should deliver /:resource/:id as ${mime}`, done => {\n                request\n                    .get('/users/1')\n                    .set('Accept', mime)\n                    .expect(200)\n                    .expect('Content-Type', new RegExp(mime, 'g'))\n                    .end(done);\n            });\n        });\n    });\n\n    _.pairs({\n        json: 'application/json',\n        xml: 'application/xml',\n        yml: 'text/x-yaml'\n    }).forEach(extandformat => {\n        describe(`   GET /:resource/:id.${extandformat[0]}`, () => {\n            it(`should be equivalent to 'GET /:resource/:id' with 'Accept: ${extandformat[1]}'`, done => {\n                request\n                    .get(`/users/1.${extandformat[0]}`)\n                    .expect(200)\n                    .end((err, actual) => {\n                        if (err) { done(err); }\n\n                        request\n                            .get('/users/1')\n                            .set('Accept', extandformat[1])\n                            .expect(200)\n                            .end((e, expected) => {\n                                if (e) { done(e); }\n                                assert.deepEqual(actual.text, expected.text);\n                                done();\n                            });\n                    });\n            });\n        });\n    });\n\n    describe('   GET /:resource/:id.:ext', () => {\n        it('should return an error for unknown extensions', done => {\n            request\n                .get('/users/1.unknown')\n                .set('Accept', 'application/json')\n                .expect(400)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.ok('url' in res.body);\n                    assert.deepEqual(_.omit(res.body, ['url']), expressRestOrmErrors.UNKNOWN_TYPE.error);\n                    done();\n                });\n        });\n    });\n\n    describe('   GET /:resource/:id?include_docs=true', () => {\n        it('should expand foreign keys to resources', done => {\n            request\n                .get('/couples/1?include_docs=true')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(res.body, {\n                        id: 1,\n                        one: users.dominik,\n                        another: users.hanna\n                    });\n                    done();\n                });\n        });\n    });\n\n    describe('   GET /:resource/:id?fields=:fields', () => {\n        it('should return a partial response matching :fields', done => {\n            request\n                .get('/users/1?fields=givenname')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(res.body, _.pick(users.dominik, 'id', 'givenname'));\n                    done();\n                });\n        });\n    });\n\n    describe('  POST /:resource/:id', () => {\n        it('should return an error as this is not allowed', done => {\n            let rick = { givenname: 'Rick', lastname: 'Astley' };\n\n            request\n                .post('/users/1')\n                .set('Accept', 'application/json')\n                .send(rick)\n                .expect(400)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.ok(_.has(res.body, 'reason'));\n                    assert.ok(_.has(res.body, 'url'));\n                    done();\n                });\n        });\n    });\n\n    describe('   PUT /:resource/:id', () => {\n        it('should update the resource with the data from req.body', done => {\n            let rick = { givenname: 'Rick', lastname: 'Astley' };\n\n            request\n                .put('/users/1')\n                .set('Accept', 'application/json')\n                .send(rick)\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n\n                    request\n                        .get(res.body)\n                        .set('Accept', 'application/json')\n                        .expect(200)\n                        .end((e, r) => {\n                            if (e) { done(e); }\n                            assert.deepEqual(r.body, _.extend({ id: 1 }, rick));\n                            done();\n                        });\n                });\n        });\n    });\n\n    describe('DELETE /:resource/:id', () => {\n        it('should delete the resource', done => {\n            request\n                .delete('/users/1')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end(err => {\n                    if (err) { done(err); }\n                    User.findById(1).then(res => {\n                        assert.equal(res, null);\n                        done();\n                    });\n                });\n        });\n    });\n\n    describe('   GET /:resource/:id/:field', () => {\n        it('should deliver the field only if :field is no foreign key', done => {\n            request\n                .get('/users/1/givenname')\n                .set('Accept', 'application/json')\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.equal(res.body, users.dominik.givenname);\n                    done();\n                });\n        });\n\n        it('should redirect to the nested field if :field is a foreign key', done => {\n            request\n                .get('/couples/1/one')\n                .set('Accept', 'application/json')\n                .expect(302)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(res.headers.location, `/users/${users.dominik.id}`);\n                    done();\n                });\n        });\n\n        it('should respond with 400 Bad Request if :field is unknown', done => {\n            request\n                .get('/users/1/foo')\n                .set('Accept', 'application/json')\n                .expect(400)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(_.omit(res.body, 'url'), expressRestOrmErrors.UNKNOWN_FIELD.error);\n                    done();\n                });\n        });\n    });\n\n    _.pairs({\n        json: 'application/json',\n        xml: 'application/xml',\n        yml: 'text/x-yaml'\n    }).forEach(extandformat => {\n        describe(`   GET /:resource/:id/:field.${extandformat[0]}`, () => {\n            it(`should be equivalent to 'GET /:resource/:id/:field' with 'Accept: ${extandformat[1]}'`, done => {\n                async.parallel([\n                    cb => {\n                        request\n                            .get(`/users/1/givenname.${extandformat[0]}`)\n                            .set('Accept', extandformat[1])\n                            .expect(200)\n                            .end((e1, actual) => {\n                                if (e1) { done(e1); }\n\n                                request\n                                    .get('/users/1/givenname')\n                                    .set('Accept', extandformat[1])\n                                    .expect(200)\n                                    .end((e2, expected) => {\n                                        if (e2) { done(e2); }\n                                        assert.deepEqual(actual.text, expected.text);\n                                        cb();\n                                    });\n                            });\n                    },\n                    cb => {\n                        request\n                            .get(`/couples/1/one.${extandformat[0]}`)\n                            .set('Accept', extandformat[1])\n                            .expect(302)\n                            .end((e1, actual) => {\n                                if (e1) { done(e1); }\n\n                                request\n                                    .get('/couples/1/one')\n                                    .set('Accept', extandformat[1])\n                                    .expect(302)\n                                    .end((e2, expected) => {\n                                        if (e2) { done(e2); }\n                                        assert.equal(actual.headers.location, expected.headers.location);\n                                        cb();\n                                    });\n                            });\n                    },\n                    cb => {\n                        request\n                            .get(`/users/1/unknown.${extandformat[0]}`)\n                            .set('Accept', extandformat[1])\n                            .expect(400)\n                            .end((e1, actual) => {\n                                if (e1) { done(e1); }\n\n                                request\n                                    .get('/users/1/unknown')\n                                    .set('Accept', extandformat[1])\n                                    .expect(400)\n                                    .end((e2, expected) => {\n                                        if (e2) { done(e2); }\n                                        assert.deepEqual(actual.body, expected.body);\n                                        cb();\n                                    });\n                            });\n                    }\n                ], done);\n            });\n        });\n    });\n\n    describe('   GET /:resource/:id/:field.:ext', () => {\n        it('should return an error for unknown extensions', done => {\n            request\n                .get('/users/1/givenname.unknown')\n                .set('Accept', 'application/json')\n                .expect(400)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.deepEqual(_.omit(res.body, 'url'), expressRestOrmErrors.UNKNOWN_TYPE.error);\n                    done();\n                });\n        });\n    });\n\n    _.values(expressRestOrmErrors).forEach(error => {\n        describe(`   GET /_errors/${error.slug}`, () => {\n            it(`should inform in detail about '${error.error.reason}'`, done => {\n                request\n                    .get(`/_errors/${error.slug}`)\n                    .set('Accept', 'application/json')\n                    .expect(200)\n                    .end((err, res) => {\n                        if (err) { done(err); }\n                        assert.deepEqual(res.body, error.description);\n                        done();\n                    });\n            });\n        });\n    });\n\n    describe('   GET /*?method=:method', () => {\n        it('should perform HTTP :method instead of HTTP GET', done => {\n            let rick = {givenname: 'Rick', lastname: 'Astley'};\n\n            request\n                .put('/users/1')\n                .set('Accept', 'application/json')\n                .send(rick)\n                .expect(200)\n                .end(e1 => {\n                    if (e1) { done(e1); }\n\n                    User.findById(1).then(u1 => {\n                        let expected = u1.dataValues;\n\n                        User.upsert(users.dominik).then(() => {\n                            request\n                                .get('/users/1?method=PUT')\n                                .set('Accept', 'application/json')\n                                .send(rick)\n                                .expect(200)\n                                .end(e2 => {\n                                    if (e2) { done(e2); }\n\n                                    User.findById(1).then(u2 => {\n                                        var actual = u2.dataValues;\n                                        assert.deepEqual(actual, expected);\n                                        done();\n                                    });\n                                });\n                        });\n                    });\n                });\n        });\n    });\n\n    describe('     * /*?suppress_response_codes=true', () => {\n        it('should set status=200 and serve the original status in res.body', done => {\n            request\n                .post('/users/1?suppress_response_codes=true')\n                .set('Accept', 'application/json')\n                .send({ givenname: 'Rick', lastname: 'Astley' })\n                .expect(200)\n                .end((err, res) => {\n                    if (err) { done(err); }\n                    assert.equal(res.body.status, 400);\n                    done();\n                });\n        });\n    });\n});\n"]}