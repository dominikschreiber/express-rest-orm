{"version":3,"sources":["src/main/index.js"],"names":[],"mappings":"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","file":"src/main/index.js","sourcesContent":["'use strict';\n\nimport * as _ from 'lodash';\nimport * as untyped from 'untyped';\nimport * as Q from 'q';\nimport * as yaml from 'yamljs';\nimport * as EasyXml from 'easyxml';\nimport {Router} from 'express';\n\nimport * as errors from './errors';\n\nconst xmldefaults = {\n    singularizeChildren: true,\n    allowAttributes: true,\n    manifest: true\n};\nconst errorpathelement = '_errors';\nconst extensionmappings = {\n    json: 'json',\n    xml: 'xml',\n    yml: 'text/x-yaml'\n};\nconst defaults = {\n    limit: 10,\n    offset: 0\n};\n\n/**\n * creates an express router middleware that\n * serves every sequelize resource in `models`\n * as a rest service at `/:resource` (relative\n * to the mount point of the router)\n *\n * for examples in this class, assume it is\n * mounted at '/api'\n */\nexport default function(models) {\n    /**\n     * creates the {{pseudo-mime}} => {{serialization}}\n     * mappings required by the res.format of express\n     */\n    const format = (xml, res, object) => {\n        return {\n            xml: () => {\n                res\n                    .set('Content-Type', 'application/xml')\n                    .send(xml.render(object)); \n            },\n            json: () => {\n                res\n                    .json(object); \n            },\n            'text/x-yaml': () => {\n                res\n                    .set('Content-Type', 'text/x-yaml')\n                    .send(yaml.stringify(object));\n            }\n        };\n    };\n\n    /**\n     * turns sequelize item to plain javascript object,\n     * omits `createdAt` and `updatedAt` values\n     */\n    const cleanitem = item => _.omit(item.dataValues, 'createdAt', 'updatedAt');\n\n    /**\n     * turns a list of sequelize items to plain javascript objects\n     * @see #cleanitem(item)\n     */\n    const cleanitems = items => items.map(item => cleanitem(item));\n\n    /**\n     * creates an xml renderer based on EasyXml\n     * given a root element (normally model.getTableName())\n     */\n    const xmlbuilder = root => new EasyXml.default(_.extend({ rootElement: root }, xmldefaults));\n\n    const errorbuilder = (req, err) => _.extend({ url: `${req.baseUrl}/${errorpathelement}/${err.slug}` }, err.error);\n\n    let api = new Router();\n\n    /**\n     * support ?method=(POST|PUT|DELETE) by\n     * overwriting req.method if this parameter\n     * is set\n     */\n    api.use((req, res, next) => {\n        if ('method' in req.query && ['POST', 'PUT', 'DELETE'].indexOf(req.query.method) > -1) {\n            req.method = req.query.method;\n            delete req.query.method;\n        }\n        next();\n    });\n\n    // ===== / ==========================================================================\n\n    /**\n     * lists urls to all resource types, e.g.\n     * \n     * ```\n     * ['/api/foo', '/api/bar']\n     * ```\n     */\n    api.get('/', (req, res, next) => {\n        res.format(format(\n            xmlbuilder('endpoints'),\n            res,\n            models.map(model => { return [req.baseUrl, model.getTableName()].join('/'); })\n        ));\n        next();\n    });\n\n    // ===== /_errors/:slug =============================================================\n\n    _.values(errors).forEach(err => {\n        api.get('/' + errorpathelement + '/' + err.slug, (req, res, next) => {\n            res.format(format(\n                xmlbuilder('error'),\n                res,\n                err.description\n            ));\n            next();\n        });\n    });\n\n    /**\n     * for examples, let `model` be `foo`\n     */\n    models.forEach(model => {\n        const collection = '/' + model.getTableName();\n        const resource = collection + '/:id';\n        const field = resource + '/:field';\n        const foreignkeys = _.pairs(model.attributes)\n                            .filter(attributeOptions => 'referencesKey' in attributeOptions[1])\n                            .map(attributeOptions => { return {\n                                attribute: attributeOptions[0],\n                                foreignkey: attributeOptions[1].referencesKey\n                            }; });\n        const xml = xmlbuilder(model.getTableName());\n\n        const sendwithstatus = (res, status, body) => {\n            if (res.req.query.suppress_response_codes === 'true') {\n                _.extend(body, { status: status });\n            } else {\n                res.status(status);\n            }\n            res.format(format(xml, res, body));\n        };\n\n        const resourceurl = (req, id) => req.baseUrl + collection + '/' + id;\n\n        const getcollection = req => {\n            let options = {\n                    limit: defaults.limit, \n                    offset: defaults.offset\n                };\n            let where = {};\n\n            // ?limit=, ?offset=\n            Object.keys(options).forEach(key => {\n                if (key in req.query) {\n                    options[key] = parseInt(req.query[key]);\n                }\n            });\n\n            // ?:field=\n            Object.keys(_.omit(model.attributes, 'createdAt', 'updatedAt')).forEach(attribute => {\n                ['', '~', '|', '^', '$', '*'].forEach(match => {\n                    const queryparam = attribute + match;\n\n                    if (queryparam in req.query) {\n                        let value = req.query[queryparam];\n\n                        switch (match) {\n                            case '': // exact match\n                                where[attribute] = value; break;\n                            case '~': // oneof match\n                                where[attribute] = { in: value.split(',') }; break;\n                            case '|': // prefix-/exact match\n                                where[attribute] = { like: value + '%' }; break;\n                            case '^': // startswith match\n                                where[attribute] = { like: value + '%' }; break;\n                            case '$': // endswith match\n                                where[attribute] = { like: '%' + value }; break;\n                            case '*': // contains match\n                                where[attribute] = { like: '%' + value + '%' }; break;\n                        }\n                    }\n                });\n            });\n            if (!_.isEmpty(where)) {\n                options.where = where;\n            }\n\n            return new Promise(resolve => {\n                // ?include_docs=true\n                if (req.query.include_docs == 'true') {\n                    // ?fields=\n                    if ('fields' in req.query) {\n                        options.attributes = Object.keys(untyped.parse(req.query.fields)).concat(['id']);\n                    }\n                    model.findAll(options).then(results => {\n                        resolve(cleanitems(results));\n                    });\n                } else {\n                    model.findAll(_.defaults({\n                        attributes: ['id']\n                    }, options)).then(results => {\n                        resolve(results.map(result => resourceurl(req, result.id)));\n                    });\n                }\n            });\n        };\n\n        const getresource = req => {\n            const shouldIncludeDocs = req.query.include_docs == 'true';\n            let options = {};\n\n            // ?fields=\n            if ('fields' in req.query) {\n                options.attributes = _.uniq(Object.keys(untyped.parse(req.query.fields)).concat(['id']));\n            }\n\n            return new Promise((resolve, reject) => {\n                model.findOne(req.params.id.replace(/\\.[^\\.]+$/g, ''), options).then(result => {\n                    // ?include_docs=true\n                    if (shouldIncludeDocs) {\n                        Q.all(foreignkeys.map(foreignkey => {\n                            const foreigntable = foreignkey.foreignkey.split('.')[0];\n                            // can not use sequelize.model(...) as the model name\n                            // may not be derived from foreignkey.foreignkey\n                            // (e.g. foreignkey could be 'users.id', but model name is 'user')\n                            const foreignmodel = _.find(models, m => m.getTableName() === foreigntable);\n\n                            return foreignmodel.findOne(result.dataValues[foreignkey.attribute]);\n                        })).then(foreignvalues => {\n                            _.zip(foreignkeys, foreignvalues).forEach(keyValue => {\n                                result.dataValues[keyValue[0].attribute] = cleanitem(keyValue[1]);\n                            });\n                            resolve(cleanitem(result));\n                        });\n                    }\n                    // urls for foreign keys\n                    else {\n                        foreignkeys.forEach(foreignkey => \n                            result.dataValues[foreignkey.attribute] = req.baseUrl + '/' + foreignkey.foreignkey.split('.')[0] + '/' + result.dataValues[foreignkey.attribute]\n                        );\n                        resolve(cleanitem(result));\n                    }\n                }, reject);\n            });\n        };\n\n        // ===== /:resource =============================================================\n\n        /**\n         * lists urls to all resources specified by `model`, e.g.\n         *\n         * ```\n         * ['/api/foo/1', '/api/foo/2']\n         * ```\n         *\n         * if called with ?include_docs=true, returns the docs instead, e.g.\n         *\n         * ```\n         * [{id: 1, name: goo}, {id: 2, name: gle}]\n         * ```\n         */\n        api.get(collection, (req, res, next) => {\n            getcollection(req).then(items => {\n                res.format(format(xml, res, items));\n                next();\n            });\n        });\n\n        api.get(collection + '.:ext', (req, res, next) => {\n            if (req.params.ext in extensionmappings) {\n                getcollection(req).then(items => {\n                    format(xml, res, items)[extensionmappings[req.params.ext]]();\n                    next();\n                });\n            } else {\n                sendwithstatus(res, 400, errorbuilder(req, errors.UNKNOWN_TYPE));\n                next();\n            }\n        });\n\n        api.post(collection, (req, res, next) => {\n            model.create(req.body).then(resource => {\n                res.format(format(\n                    xml,\n                    res,\n                    resourceurl(req, resource.dataValues.id)\n                ));\n                next();\n            });\n        });\n\n        api.put(collection, (req, res, next) => {\n            Q.all(req.body.map(item => model.upsert(item))).then(() => {\n                res.sendStatus(200);\n                next();\n            });\n        });\n\n        api.delete(collection, (req, res, next) => {\n            model.destroy({where: {id: {gt: 0}}}).then(() => {\n                res.sendStatus(200);\n                next();\n            });\n        });\n\n        // ===== /:resource/:id =========================================================\n\n        /**\n         * gets the single resource at '/:resource/:id', e.g.\n         *\n         * {id: 1, name: 'goo'}\n         */\n        api.get(resource, (req, res, next) => {\n            // /:id matches /:id.:ext as well -> next() in that case\n            if (/\\.[^\\.]+$/.test(req.params.id)) {\n                next();\n            } else {\n                getresource(req).then(item => {\n                    res.format(format(xml, res, item));\n                    next();\n                });\n            }\n        });\n\n        api.get(resource + '.:ext', (req, res, next) => {\n            if (req.params.ext in extensionmappings) {\n                getresource(req).then(item => {\n                    format(xml, res, item)[extensionmappings[req.params.ext]]();\n                    next();\n                });\n            } else {\n                sendwithstatus(res, 400, errorbuilder(req, errors.UNKNOWN_TYPE));\n                next();\n            }\n        });\n\n        api.post(resource, (req, res, next) => {\n            sendwithstatus(res, 400, errorbuilder(req, errors.POST_RESOURCE));\n            next();\n        });\n\n        api.put(resource, (req, res, next) => {\n            model.update(req.body, {where: {id: req.params.id}}).then(() => {\n                res.format(format(xml, res, resourceurl(req, req.params.id)));\n                next();\n            });\n        });\n\n        api.delete(resource, (req, res, next) => {\n            model.destroy({where: {id: req.params.id}}).then(() => {\n                res.format(format(xml, res, req.baseUrl + collection));\n                next();\n            });\n        });\n\n        // ===== /:resource/:id/:field ==================================================\n\n        // ----- /:resource/:id/:field --------------------------------------------------\n\n        api.get(field, (req, res, next) => {\n            // /:field matches /:field.:ext as well -> next() in that case\n            if (/\\.[^\\.]+$/.test(req.params.field)) {\n                next();\n            } else {\n                if (req.params.field in model.attributes) {\n                    getresource(req).then(resource => {\n                        if ('referencesKey' in model.attributes[req.params.field]) {\n                            res.redirect(resource[req.params.field]);\n                        } else {\n                            res.format(format(xml, res, resource[req.params.field]));\n                        }\n                        next();\n                    });\n                } else {\n                    sendwithstatus(res, 400, errorbuilder(req, errors.UNKNOWN_FIELD));\n                    next();\n                }\n            }\n        });\n\n        // ----- /:resource/:id/:field.:ext ---------------------------------------------\n\n        api.get(field + '.:ext', (req, res, next) => {\n            if (req.params.ext in extensionmappings) {\n                let field = req.params.field.replace(/\\.[^\\.]+$/g, '');\n                if (field in model.attributes) {\n                    getresource(req).then(resource => {\n                        if ('referencesKey' in model.attributes[field]) {\n                            res.redirect(resource[field]);\n                        } else {\n                            format(xml, res, resource[field])[extensionmappings[req.params.ext]]();\n                        }\n                        next();\n                    });\n                } else {\n                    sendwithstatus(res, 400, errorbuilder(req, errors.UNKNOWN_FIELD));\n                    next();\n                }\n            } else {\n                sendwithstatus(res, 400, errorbuilder(req, errors.UNKNOWN_TYPE));\n                next();\n            }\n        });\n    });\n\n    return api;\n}"]}